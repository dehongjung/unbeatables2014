"""autogenerated by genpy from unb_robocup/SPLMsgSendRequest.msg. Do not edit."""
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct


class SPLMsgSendRequest(genpy.Message):
  _md5sum = "a61e78d7087f8ec58acadd5ee3b8e4e6"
  _type = "unb_robocup/SPLMsgSendRequest"
  _has_header = False #flag to mark the presence of a Header object
  _full_text = """int8 playerNum
int8 teamColor
int8 fallen
float32[3] pose
float32[2] walkingTo
float32[2] shootingTo
int32 ballAge
float32[2] ball
float32[2] ballVel
int16 intention
int16 numOfDataBytes

"""
  __slots__ = ['playerNum','teamColor','fallen','pose','walkingTo','shootingTo','ballAge','ball','ballVel','intention','numOfDataBytes']
  _slot_types = ['int8','int8','int8','float32[3]','float32[2]','float32[2]','int32','float32[2]','float32[2]','int16','int16']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       playerNum,teamColor,fallen,pose,walkingTo,shootingTo,ballAge,ball,ballVel,intention,numOfDataBytes

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(SPLMsgSendRequest, self).__init__(*args, **kwds)
      #message fields cannot be None, assign default values for those that are
      if self.playerNum is None:
        self.playerNum = 0
      if self.teamColor is None:
        self.teamColor = 0
      if self.fallen is None:
        self.fallen = 0
      if self.pose is None:
        self.pose = [0.,0.,0.]
      if self.walkingTo is None:
        self.walkingTo = [0.,0.]
      if self.shootingTo is None:
        self.shootingTo = [0.,0.]
      if self.ballAge is None:
        self.ballAge = 0
      if self.ball is None:
        self.ball = [0.,0.]
      if self.ballVel is None:
        self.ballVel = [0.,0.]
      if self.intention is None:
        self.intention = 0
      if self.numOfDataBytes is None:
        self.numOfDataBytes = 0
    else:
      self.playerNum = 0
      self.teamColor = 0
      self.fallen = 0
      self.pose = [0.,0.,0.]
      self.walkingTo = [0.,0.]
      self.shootingTo = [0.,0.]
      self.ballAge = 0
      self.ball = [0.,0.]
      self.ballVel = [0.,0.]
      self.intention = 0
      self.numOfDataBytes = 0

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_struct_3b.pack(_x.playerNum, _x.teamColor, _x.fallen))
      buff.write(_struct_3f.pack(*self.pose))
      buff.write(_struct_2f.pack(*self.walkingTo))
      buff.write(_struct_2f.pack(*self.shootingTo))
      buff.write(_struct_i.pack(self.ballAge))
      buff.write(_struct_2f.pack(*self.ball))
      buff.write(_struct_2f.pack(*self.ballVel))
      _x = self
      buff.write(_struct_2h.pack(_x.intention, _x.numOfDataBytes))
    except struct.error as se: self._check_types(se)
    except TypeError as te: self._check_types(te)

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    try:
      end = 0
      _x = self
      start = end
      end += 3
      (_x.playerNum, _x.teamColor, _x.fallen,) = _struct_3b.unpack(str[start:end])
      start = end
      end += 12
      self.pose = _struct_3f.unpack(str[start:end])
      start = end
      end += 8
      self.walkingTo = _struct_2f.unpack(str[start:end])
      start = end
      end += 8
      self.shootingTo = _struct_2f.unpack(str[start:end])
      start = end
      end += 4
      (self.ballAge,) = _struct_i.unpack(str[start:end])
      start = end
      end += 8
      self.ball = _struct_2f.unpack(str[start:end])
      start = end
      end += 8
      self.ballVel = _struct_2f.unpack(str[start:end])
      _x = self
      start = end
      end += 4
      (_x.intention, _x.numOfDataBytes,) = _struct_2h.unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_struct_3b.pack(_x.playerNum, _x.teamColor, _x.fallen))
      buff.write(self.pose.tostring())
      buff.write(self.walkingTo.tostring())
      buff.write(self.shootingTo.tostring())
      buff.write(_struct_i.pack(self.ballAge))
      buff.write(self.ball.tostring())
      buff.write(self.ballVel.tostring())
      _x = self
      buff.write(_struct_2h.pack(_x.intention, _x.numOfDataBytes))
    except struct.error as se: self._check_types(se)
    except TypeError as te: self._check_types(te)

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    try:
      end = 0
      _x = self
      start = end
      end += 3
      (_x.playerNum, _x.teamColor, _x.fallen,) = _struct_3b.unpack(str[start:end])
      start = end
      end += 12
      self.pose = numpy.frombuffer(str[start:end], dtype=numpy.float32, count=3)
      start = end
      end += 8
      self.walkingTo = numpy.frombuffer(str[start:end], dtype=numpy.float32, count=2)
      start = end
      end += 8
      self.shootingTo = numpy.frombuffer(str[start:end], dtype=numpy.float32, count=2)
      start = end
      end += 4
      (self.ballAge,) = _struct_i.unpack(str[start:end])
      start = end
      end += 8
      self.ball = numpy.frombuffer(str[start:end], dtype=numpy.float32, count=2)
      start = end
      end += 8
      self.ballVel = numpy.frombuffer(str[start:end], dtype=numpy.float32, count=2)
      _x = self
      start = end
      end += 4
      (_x.intention, _x.numOfDataBytes,) = _struct_2h.unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill

_struct_I = genpy.struct_I
_struct_i = struct.Struct("<i")
_struct_3b = struct.Struct("<3b")
_struct_2f = struct.Struct("<2f")
_struct_2h = struct.Struct("<2h")
_struct_3f = struct.Struct("<3f")
"""autogenerated by genpy from unb_robocup/SPLMsgSendResponse.msg. Do not edit."""
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct


class SPLMsgSendResponse(genpy.Message):
  _md5sum = "d41d8cd98f00b204e9800998ecf8427e"
  _type = "unb_robocup/SPLMsgSendResponse"
  _has_header = False #flag to mark the presence of a Header object
  _full_text = """


"""
  __slots__ = []
  _slot_types = []

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(SPLMsgSendResponse, self).__init__(*args, **kwds)

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      pass
    except struct.error as se: self._check_types(se)
    except TypeError as te: self._check_types(te)

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    try:
      end = 0
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      pass
    except struct.error as se: self._check_types(se)
    except TypeError as te: self._check_types(te)

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    try:
      end = 0
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill

_struct_I = genpy.struct_I
class SPLMsgSend(object):
  _type          = 'unb_robocup/SPLMsgSend'
  _md5sum = 'a61e78d7087f8ec58acadd5ee3b8e4e6'
  _request_class  = SPLMsgSendRequest
  _response_class = SPLMsgSendResponse
