#include"RoboCupGameControlData.h"
#include<ros/ros.h>
#include<alproxies/almemoryproxy.h>
#include<unb_robocup/GetRobotState.h>
#include<unb_robocup/SetRobotState.h> //Remover depois

class GameCtrlComm
{
	public:
	
		ros::NodeHandle node_handle_;
		
        //Get State Service Server
        ros::ServiceServer ss_get_robot_state_;
        
        //Memory proxy
        AL::ALMemoryProxy* memory;	
        
		GameCtrlComm(ros::NodeHandle& node_handle)
		{
			node_handle_ = node_handle;
			
			ss_get_robot_state_ = node_handle.advertiseService("/unb_robocup/robot_state/get", &GameCtrlComm::getRobotStateCallback, this);
			
			
		    memory = new AL::ALMemoryProxy("127.0.0.1");
			
			//int teamNumber   = 2;
			//int teamColor    = 2;
			//int playerNumber = 2;
            //memory->insertData("GameCtrl/teamNumber", teamNumber);
            //memory->insertData("GameCtrl/teamColour", teamColor);
            //memory->insertData("GameCtrl/playerNumber", playerNumber);
		}
		~GameCtrlComm()
		{
		    delete memory;
		};
		
		//A ser deletado quando conseguirmos fazer funcionar a comunicacao com o GameController
		// Usado para fins de debug setando na nao os estados do robo
		//bool setRobotStateCallback(unb_robocup::SetRobotState::Request& request, unb_robocup::SetRobotState::Response& response)
        //{
//            memory->insertData("GameCtrl/RoboCupGameControlData", request.state);
  //      }

        bool getRobotStateCallback(unb_robocup::GetRobotState::Request& request, unb_robocup::GetRobotState::Response& response)
        {
        
            AL::ALValue team_number_value = memory->getData("GameCtrl/teamNumber");
            int team_number = team_number_value;

            AL::ALValue player_number_value = memory->getData("GameCtrl/playerNumber");
            int player_number = player_number_value;
            
            AL::ALValue team_color_value = memory->getData("GameCtrl/teamColour");
            int team_color = team_color_value;
        
            RoboCupGameControlData gameCtrlData; // should probably zero it the first time it is used
            AL::ALValue value = memory->getData("GameCtrl/RoboCupGameControlData");
            if (value.isBinary() && value.getSize() == sizeof(RoboCupGameControlData))
                memcpy(&gameCtrlData, value, sizeof(RoboCupGameControlData));
            
            ROS_INFO_STREAM(" " << gameCtrlData.teams[team_color].players[player_number].penalty); //Print robot status
            response.game_state = gameCtrlData.state;
            response.robot_state = gameCtrlData.teams[team_color].players[player_number].penalty; //Last State: gameCtrlData.teams[team_number].players[player_number].penalty
            return true;
        }	

};

int main(int argc, char** argv)
{
	//Always need to do this
	ros::init(argc, argv, "node_gamectrl_comm");
	ros::NodeHandle node_handle;

    GameCtrlComm game_ctrl_comm(node_handle);

	ros::spin();
		
	return 0;
}


