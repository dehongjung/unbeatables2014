#!/usr/bin/env python

##############################################################################
#                                INCLUDES
##############################################################################
import roslib; roslib.load_manifest('unb_robocup')
import rospy

import math
#Naoqi
from naoqi import ALProxy
#Messages
from std_msgs.msg import Bool
from unb_robocup.msg import *

#Services
from unb_robocup.srv import *

##############################################################################
#                            NODE MAIN ROUTINE
##############################################################################

def main():

    # Initialize Node
    rospy.init_node('motion_node')
    
    # Initialize object
    motion = Motion()    
    try:
        # Bloqueante
        rospy.spin()
    except KeyboardInterrupt:
        rospy.loginfo('shut down unb_motion_node')
        rospy.signal_shutdown('Keyboard interrupt') 

##############################################################################
#                            CLASS RobotPlot
##############################################################################

class Motion:

    ##############################################################################
    #                         CONSTRUCTORS AND DESTRUCTORS
    ##############################################################################

    def __init__(self):
    
         #Check Naoqi lib
        self.al_robot_posture_proxy = ALProxy("ALRobotPosture","127.0.0.1",9559)
        self.al_motion_proxy = ALProxy("ALMotion","127.0.0.1",9559)
        self.al_navigation_proxy=ALProxy("ALNavigation","127.0.0.1",9559)
        
        self.al_motion_proxy.setFallManagerEnabled(False)
        # Initialize subscribes
        self.sub_move_to = rospy.Subscriber('/unb_robocup/motion/walk_to_topic', MoveToTopic,self.MoveToTopic)
        self.sub_move_around_point = rospy.Subscriber('/unb_robocup/motion/move_around_point',MoveAroundPointTopic,self.MoveAroundPointTopic)
        self.sub_move_to_navigate = rospy.Subscriber('/unb_robocup/motion/move_to_navigate', MoveToTopic,self.MoveToNavigate)
        self.sub_set_security_distance = rospy.Subscriber('/unb_robocup/motion/set_security_distance', SetSecurityDistance,self.SetSecurityDistance)
        
        # Initialize publishers
        self.pub_navigate_reached = rospy.Publisher('/unb_robocup/motion/navigate_reached', Bool)
        self.pub_is_moving = rospy.Publisher('/unb_robocup/motion/is_moving', Bool)
        self.pub_is_moving.publish(False)
        self.pub_navigate_reached.publish(False)
        # Initialize service client
  
        # Initialize service server
        self.ss_move_joint = rospy.Service('/unb_robocup/motion/move_joint', MoveJoint , self.MoveJoint)
        self.ss_goto_posture = rospy.Service('/unb_robocup/motion/goto_posture', GoToPosture , self.GoToPosture)
        self.ss_stop_posture = rospy.Service('/unb_robocup/motion/stop_posture', StopPosture , self.StopPosture)
        self.ss_stop_move = rospy.Service('/unb_robocup/motion/stop_move', StopMove , self.StopMove)
        self.ss_move_to = rospy.Service('/unb_robocup/motion/move_to', MoveTo , self.MoveTo)
        self.ss_move_around_point = rospy.Service('/unb_robocup/motion/move_around_point', MoveAroundPoint , self.MoveAroundPoint)
        self.ss_rotate = rospy.Service('/unb_robocup/motion/rotate', Rotate , self.Rotate)
        self.ss_move_toward = rospy.Service('/unb_robocup/motion/move_toward', MoveToward , self.MoveToward)
        self.ss_stifness_on = rospy.Service('/unb_robocup/motion/stiffness_on', StiffnessOn , self.StiffnessOn)
        self.ss_stifness_off = rospy.Service('/unb_robocup/motion/stiffness_off', StiffnessOff , self.StiffnessOff)
        self.ss_kick_left = rospy.Service('/unb_robocup/motion/kick_left', KickLeft , self.KickLeft)
        self.ss_kick_right = rospy.Service('/unb_robocup/motion/kick_right', KickRight , self.KickRight)
        self.ss_get_joint_angle = rospy.Service('/unb_robocup/motion/get_joint_angle', GetJointAngle , self.GetJointAngle)
        self.ss_change_joint_angle = rospy.Service('/unb_robocup/motion/change_joint_angle', ChangeJointAngle , self.ChangeJointAngle)
        self.ss_set_walk_target_velocity = rospy.Service('/unb_robocup/motion/set_walk_target_velocity', SetWalkTargetVelocity , self.SetWalkTargetVelocity)
        # 
        self.do_once = True
        
       
    ##############################################################################
    #                    SERVICE SERVER CALLBACK FUNCTIONS
    ##############################################################################
    
    def MoveJoint(self,req):
        self.al_motion_proxy.setAngles(req.joint,req.angle,req.speed)
        return MoveJointResponse()
         
    def GoToPosture(self,req):
        self.al_robot_posture_proxy.goToPosture(req.posture,req.speed)
        return GoToPostureResponse()
 
    def StopPosture(self,req):
        self.al_robot_posture_proxy.stopMove()
        return StopPostureResponse()
        
    def StopMove(self,req):
        self.pub_is_moving.publish(False)
        self.al_motion_proxy.stopMove()
        return StopMoveResponse()
    
    def MoveTo(self,req):
        self.al_motion_proxy.moveTo(req.x,req.y,req.theta)
        return MoveToResponse()
        
    def MoveAroundPoint(self,req):
        self.x=req.radius*(1-math.cos(req.theta))
        self.y=req.radius*math.sin(req.theta)
        self.theta=-req.theta
        self.al_motion_proxy.moveTo(self.x,self.y,self.theta)
        return MoveAroundPointResponse()
    
    def Rotate(self,req):
        self.al_motion_proxy.moveTo(0,0,req.theta)
        return RotateResponse()
    
    def MoveToward(self,req):
        self.al_motion_proxy.moveToward(req.x_vel_normalized,req.y_vel_normalized,req.theta_vel_normalized)
        return MoveTowardResponse()
    
    def StiffnessOn(self,req):
        self.al_motion_proxy.stiffnessInterpolation("Body",1.0,1.0)
        return StiffnessOnResponse()  
        
    def StiffnessOff(self,req):
        self.al_motion_proxy.stiffnessInterpolation("Body",0.0,1.0)
        return StiffnessOffResponse() 
        
    def KickLeft(self,req):
        names = list()
        times = list()
        keys = list()

        names.append("HeadPitch")
        times.append([ 1.00000, 1.60000, 2.00000, 2.60000, 3.40000, 4.20000, 4.40000, 5.00000, 5.60000])
        keys.append([ [ -0.01998, [ 3, -0.33333, 0.00000], [ 3, 0.20000, 0.00000]], [ -0.01692, [ 3, -0.20000, 0.00000], [ 3, 0.13333, 0.00000]], [ -0.01692, [ 3, -0.13333, 0.00000], [ 3, 0.20000, 0.00000]], [ -0.01692, [ 3, -0.20000, 0.00000], [ 3, 0.26667, 0.00000]], [ -0.02305, [ 3, -0.26667, 0.00000], [ 3, 0.26667, 0.00000]], [ -0.01385, [ 3, -0.26667, 0.00000], [ 3, 0.06667, 0.00000]], [ -0.02152, [ 3, -0.06667, 0.00000], [ 3, 0.20000, 0.00000]], [ -0.01692, [ 3, -0.20000, 0.00000], [ 3, 0.20000, 0.00000]], [ -0.02305, [ 3, -0.20000, 0.00000], [ 3, 0.00000, 0.00000]]])

        names.append("HeadYaw")
        times.append([ 1.00000, 1.60000, 2.00000, 2.60000, 3.40000, 4.20000, 4.40000, 5.00000, 5.60000])
        keys.append([ [ -0.00925, [ 3, -0.33333, 0.00000], [ 3, 0.20000, 0.00000]], [ -0.00158, [ 3, -0.20000, 0.00000], [ 3, 0.13333, 0.00000]], [ -0.00158, [ 3, -0.13333, 0.00000], [ 3, 0.20000, 0.00000]], [ -0.00004, [ 3, -0.20000, 0.00000], [ 3, 0.26667, 0.00000]], [ -0.00004, [ 3, -0.26667, 0.00000], [ 3, 0.26667, 0.00000]], [ 0.00456, [ 3, -0.26667, 0.00000], [ 3, 0.06667, 0.00000]], [ -0.00004, [ 3, -0.06667, 0.00000], [ 3, 0.20000, 0.00000]], [ -0.00004, [ 3, -0.20000, 0.00000], [ 3, 0.20000, 0.00000]], [ -0.00618, [ 3, -0.20000, 0.00000], [ 3, 0.00000, 0.00000]]])

        names.append("LAnklePitch")
        times.append([ 1.00000, 1.60000, 2.00000, 2.60000, 3.40000, 4.20000, 4.40000, 5.00000, 5.60000])
        keys.append([ [ -0.35133, [ 3, -0.33333, 0.00000], [ 3, 0.20000, 0.00000]], [ -0.28537, [ 3, -0.20000, -0.03958], [ 3, 0.13333, 0.02638]], [ -0.15344, [ 3, -0.13333, -0.01636], [ 3, 0.20000, 0.02454]], [ -0.12890, [ 3, -0.20000, 0.00000], [ 3, 0.26667, 0.00000]], [ -0.51547, [ 3, -0.26667, 0.11121], [ 3, 0.26667, -0.11121]], [ -0.79619, [ 3, -0.26667, 0.00000], [ 3, 0.06667, 0.00000]], [ 0.16563, [ 3, -0.06667, 0.00000], [ 3, 0.20000, 0.00000]], [ -0.03686, [ 3, -0.20000, 0.08590], [ 3, 0.20000, -0.08590]], [ -0.34979, [ 3, -0.20000, 0.00000], [ 3, 0.00000, 0.00000]]])

        names.append("LAnkleRoll")
        times.append([ 1.00000, 1.60000, 2.00000, 2.60000, 3.40000, 4.20000, 4.40000, 5.00000, 5.60000])
        keys.append([ [ -0.00303, [ 3, -0.33333, 0.00000], [ 3, 0.20000, 0.00000]], [ -0.08893, [ 3, -0.20000, 0.02823], [ 3, 0.13333, -0.01882]], [ -0.14415, [ 3, -0.13333, 0.00716], [ 3, 0.20000, -0.01074]], [ -0.15489, [ 3, -0.20000, 0.00964], [ 3, 0.26667, -0.01286]], [ -0.21165, [ 3, -0.26667, 0.00000], [ 3, 0.26667, 0.00000]], [ -0.17023, [ 3, -0.26667, -0.03682], [ 3, 0.06667, 0.00920]], [ -0.07359, [ 3, -0.06667, 0.00000], [ 3, 0.20000, 0.00000]], [ -0.15643, [ 3, -0.20000, 0.00000], [ 3, 0.20000, 0.00000]], [ -0.00303, [ 3, -0.20000, 0.00000], [ 3, 0.00000, 0.00000]]])

        names.append("LElbowRoll")
        times.append([ 1.00000, 1.60000, 2.00000, 2.60000, 3.40000, 4.20000, 4.40000, 5.00000, 5.60000])
        keys.append([ [ -0.98939, [ 3, -0.33333, 0.00000], [ 3, 0.20000, 0.00000]], [ -0.92649, [ 3, -0.20000, -0.01718], [ 3, 0.13333, 0.01145]], [ -0.90348, [ 3, -0.13333, -0.00205], [ 3, 0.20000, 0.00307]], [ -0.90042, [ 3, -0.20000, 0.00000], [ 3, 0.26667, 0.00000]], [ -0.97251, [ 3, -0.26667, 0.00000], [ 3, 0.26667, 0.00000]], [ -0.30676, [ 3, -0.26667, -0.21476], [ 3, 0.06667, 0.05369]], [ -0.16716, [ 3, -0.06667, -0.01713], [ 3, 0.20000, 0.05139]], [ -0.10120, [ 3, -0.20000, 0.00000], [ 3, 0.20000, 0.00000]], [ -0.98785, [ 3, -0.20000, 0.00000], [ 3, 0.00000, 0.00000]]])

        names.append("LElbowYaw")
        times.append([ 1.00000, 1.60000, 2.00000, 2.60000, 3.40000, 4.20000, 4.40000, 5.00000, 5.60000])
        keys.append([ [ -1.36990, [ 3, -0.33333, 0.00000], [ 3, 0.20000, 0.00000]], [ -1.36684, [ 3, -0.20000, 0.00000], [ 3, 0.13333, 0.00000]], [ -1.38064, [ 3, -0.13333, 0.00000], [ 3, 0.20000, 0.00000]], [ -1.38064, [ 3, -0.20000, 0.00000], [ 3, 0.26667, 0.00000]], [ -1.00941, [ 3, -0.26667, 0.00000], [ 3, 0.26667, 0.00000]], [ -1.13980, [ 3, -0.26667, 0.04950], [ 3, 0.06667, -0.01237]], [ -1.19503, [ 3, -0.06667, 0.00102], [ 3, 0.20000, -0.00307]], [ -1.19810, [ 3, -0.20000, 0.00307], [ 3, 0.20000, -0.00307]], [ -1.36837, [ 3, -0.20000, 0.00000], [ 3, 0.00000, 0.00000]]])

        names.append("LHand")
        times.append([ 1.00000, 1.60000, 2.00000, 2.60000, 3.40000, 4.20000, 4.40000, 5.00000, 5.60000])
        keys.append([ [ 0.00450, [ 3, -0.33333, 0.00000], [ 3, 0.20000, 0.00000]], [ 0.00450, [ 3, -0.20000, 0.00000], [ 3, 0.13333, 0.00000]], [ 0.00450, [ 3, -0.13333, 0.00000], [ 3, 0.20000, 0.00000]], [ 0.00450, [ 3, -0.20000, 0.00000], [ 3, 0.26667, 0.00000]], [ 0.00464, [ 3, -0.26667, 0.00000], [ 3, 0.26667, 0.00000]], [ 0.00452, [ 3, -0.26667, 0.00000], [ 3, 0.06667, 0.00000]], [ 0.00464, [ 3, -0.06667, 0.00000], [ 3, 0.20000, 0.00000]], [ 0.00450, [ 3, -0.20000, 0.00000], [ 3, 0.20000, 0.00000]], [ 0.00450, [ 3, -0.20000, 0.00000], [ 3, 0.00000, 0.00000]]])

        names.append("LHipPitch")
        times.append([ 1.00000, 1.60000, 2.00000, 2.60000, 3.40000, 4.20000, 4.40000, 5.00000, 5.60000])
        keys.append([ [ -0.45095, [ 3, -0.33333, 0.00000], [ 3, 0.20000, 0.00000]], [ -0.38653, [ 3, -0.20000, 0.00000], [ 3, 0.13333, 0.00000]], [ -0.41107, [ 3, -0.13333, 0.00000], [ 3, 0.20000, 0.00000]], [ -0.36198, [ 3, -0.20000, 0.00000], [ 3, 0.26667, 0.00000]], [ -0.61663, [ 3, -0.26667, 0.00000], [ 3, 0.26667, 0.00000]], [ -0.18864, [ 3, -0.26667, 0.00000], [ 3, 0.06667, 0.00000]], [ -0.77156, [ 3, -0.06667, 0.00000], [ 3, 0.20000, 0.00000]], [ -0.36658, [ 3, -0.20000, 0.00000], [ 3, 0.20000, 0.00000]], [ -0.44942, [ 3, -0.20000, 0.00000], [ 3, 0.00000, 0.00000]]])

        names.append("LHipRoll")
        times.append([ 1.00000, 1.60000, 2.00000, 2.60000, 3.40000, 4.20000, 4.40000, 5.00000, 5.60000])
        keys.append([ [ 0.00004, [ 3, -0.33333, 0.00000], [ 3, 0.20000, 0.00000]], [ -0.09813, [ 3, -0.20000, 0.00000], [ 3, 0.13333, 0.00000]], [ -0.01530, [ 3, -0.13333, -0.01657], [ 3, 0.20000, 0.02485]], [ 0.02612, [ 3, -0.20000, 0.00000], [ 3, 0.26667, 0.00000]], [ -0.03217, [ 3, -0.26667, 0.00153], [ 3, 0.26667, -0.00153]], [ -0.03371, [ 3, -0.26667, 0.00000], [ 3, 0.06667, 0.00000]], [ -0.01070, [ 3, -0.06667, 0.00000], [ 3, 0.20000, 0.00000]], [ -0.02757, [ 3, -0.20000, 0.00000], [ 3, 0.20000, 0.00000]], [ 0.00158, [ 3, -0.20000, 0.00000], [ 3, 0.00000, 0.00000]]])

        names.append("LHipYawPitch")
        times.append([ 1.00000, 1.60000, 2.00000, 2.60000, 3.40000, 4.20000, 4.40000, 5.00000, 5.60000])
        keys.append([ [ -0.00149, [ 3, -0.33333, 0.00000], [ 3, 0.20000, 0.00000]], [ -0.00149, [ 3, -0.20000, 0.00000], [ 3, 0.13333, 0.00000]], [ -0.13495, [ 3, -0.13333, 0.00000], [ 3, 0.20000, 0.00000]], [ -0.08126, [ 3, -0.20000, -0.01315], [ 3, 0.26667, 0.01753]], [ -0.04291, [ 3, -0.26667, 0.00000], [ 3, 0.26667, 0.00000]], [ -0.12575, [ 3, -0.26667, 0.00000], [ 3, 0.06667, 0.00000]], [ 0.00618, [ 3, -0.06667, 0.00000], [ 3, 0.20000, 0.00000]], [ -0.18557, [ 3, -0.20000, 0.00000], [ 3, 0.20000, 0.00000]], [ 0.00004, [ 3, -0.20000, 0.00000], [ 3, 0.00000, 0.00000]]])

        names.append("LKneePitch")
        times.append([ 1.00000, 1.60000, 2.00000, 2.60000, 3.40000, 4.20000, 4.40000, 5.00000, 5.60000])
        keys.append([ [ 0.70253, [ 3, -0.33333, 0.00000], [ 3, 0.20000, 0.00000]], [ 0.61049, [ 3, -0.20000, 0.03896], [ 3, 0.13333, -0.02598]], [ 0.50771, [ 3, -0.13333, 0.02536], [ 3, 0.20000, -0.03804]], [ 0.42027, [ 3, -0.20000, 0.00000], [ 3, 0.26667, 0.00000]], [ 1.12285, [ 3, -0.26667, 0.00000], [ 3, 0.26667, 0.00000]], [ 0.96024, [ 3, -0.26667, 0.16260], [ 3, 0.06667, -0.04065]], [ 0.44942, [ 3, -0.06667, 0.03324], [ 3, 0.20000, -0.09971]], [ 0.34971, [ 3, -0.20000, 0.00000], [ 3, 0.20000, 0.00000]], [ 0.70100, [ 3, -0.20000, 0.00000], [ 3, 0.00000, 0.00000]]])

        names.append("LShoulderPitch")
        times.append([ 1.00000, 1.60000, 2.00000, 2.60000, 3.40000, 4.20000, 4.40000, 5.00000, 5.60000])
        keys.append([ [ 1.41277, [ 3, -0.33333, 0.00000], [ 3, 0.20000, 0.00000]], [ 1.46953, [ 3, -0.20000, -0.01411], [ 3, 0.13333, 0.00941]], [ 1.48334, [ 3, -0.13333, -0.00205], [ 3, 0.20000, 0.00307]], [ 1.48640, [ 3, -0.20000, -0.00307], [ 3, 0.26667, 0.00409]], [ 1.79935, [ 3, -0.26667, 0.00000], [ 3, 0.26667, 0.00000]], [ 0.99552, [ 3, -0.26667, 0.00000], [ 3, 0.06667, 0.00000]], [ 1.89445, [ 3, -0.06667, -0.05778], [ 3, 0.20000, 0.17335]], [ 2.06780, [ 3, -0.20000, 0.00000], [ 3, 0.20000, 0.00000]], [ 1.41431, [ 3, -0.20000, 0.00000], [ 3, 0.00000, 0.00000]]])

        names.append("LShoulderRoll")
        times.append([ 1.00000, 1.60000, 2.00000, 2.60000, 3.40000, 4.20000, 4.40000, 5.00000, 5.60000])
        keys.append([ [ 0.28375, [ 3, -0.33333, 0.00000], [ 3, 0.20000, 0.00000]], [ 0.20091, [ 3, -0.20000, 0.02362], [ 3, 0.13333, -0.01575]], [ 0.16563, [ 3, -0.13333, 0.00000], [ 3, 0.20000, 0.00000]], [ 0.16563, [ 3, -0.20000, 0.00000], [ 3, 0.26667, 0.00000]], [ 0.41721, [ 3, -0.26667, 0.00000], [ 3, 0.26667, 0.00000]], [ 0.14109, [ 3, -0.26667, 0.00000], [ 3, 0.06667, 0.00000]], [ 0.21779, [ 3, -0.06667, -0.01125], [ 3, 0.20000, 0.03375]], [ 0.27608, [ 3, -0.20000, -0.00307], [ 3, 0.20000, 0.00307]], [ 0.27915, [ 3, -0.20000, 0.00000], [ 3, 0.00000, 0.00000]]])

        names.append("LWristYaw")
        times.append([ 1.00000, 1.60000, 2.00000, 2.60000, 3.40000, 4.20000, 4.40000, 5.00000, 5.60000])
        keys.append([ [ -0.01998, [ 3, -0.33333, 0.00000], [ 3, 0.20000, 0.00000]], [ -0.02459, [ 3, -0.20000, 0.00215], [ 3, 0.13333, -0.00143]], [ -0.03072, [ 3, -0.13333, 0.00000], [ 3, 0.20000, 0.00000]], [ -0.03072, [ 3, -0.20000, 0.00000], [ 3, 0.26667, 0.00000]], [ 0.01223, [ 3, -0.26667, -0.01457], [ 3, 0.26667, 0.01457]], [ 0.05672, [ 3, -0.26667, 0.00000], [ 3, 0.06667, 0.00000]], [ 0.04444, [ 3, -0.06667, 0.00000], [ 3, 0.20000, 0.00000]], [ 0.08433, [ 3, -0.20000, 0.00000], [ 3, 0.20000, 0.00000]], [ -0.01998, [ 3, -0.20000, 0.00000], [ 3, 0.00000, 0.00000]]])

        names.append("RAnklePitch")
        times.append([ 1.00000, 1.60000, 2.00000, 2.60000, 3.40000, 4.20000, 4.40000, 5.00000, 5.60000])
        keys.append([ [ -0.34818, [ 3, -0.33333, 0.00000], [ 3, 0.20000, 0.00000]], [ -0.52765, [ 3, -0.20000, 0.00000], [ 3, 0.13333, 0.00000]], [ -0.39266, [ 3, -0.13333, -0.02863], [ 3, 0.20000, 0.04295]], [ -0.31289, [ 3, -0.20000, 0.00000], [ 3, 0.26667, 0.00000]], [ -0.31289, [ 3, -0.26667, 0.00000], [ 3, 0.26667, 0.00000]], [ -0.31750, [ 3, -0.26667, 0.00000], [ 3, 0.06667, 0.00000]], [ -0.31596, [ 3, -0.06667, -0.00038], [ 3, 0.20000, 0.00115]], [ -0.31289, [ 3, -0.20000, 0.00000], [ 3, 0.20000, 0.00000]], [ -0.35124, [ 3, -0.20000, 0.00000], [ 3, 0.00000, 0.00000]]])

        names.append("RAnkleRoll")
        times.append([ 1.00000, 1.60000, 2.00000, 2.60000, 3.40000, 4.20000, 4.40000, 5.00000, 5.60000])
        keys.append([ [ -0.00149, [ 3, -0.33333, 0.00000], [ 3, 0.20000, 0.00000]], [ -0.05672, [ 3, -0.20000, 0.03835], [ 3, 0.13333, -0.02557]], [ -0.19324, [ 3, -0.13333, 0.01432], [ 3, 0.20000, -0.02147]], [ -0.21472, [ 3, -0.20000, 0.00000], [ 3, 0.26667, 0.00000]], [ -0.21012, [ 3, -0.26667, 0.00000], [ 3, 0.26667, 0.00000]], [ -0.21012, [ 3, -0.26667, 0.00000], [ 3, 0.06667, 0.00000]], [ -0.21012, [ 3, -0.06667, 0.00000], [ 3, 0.20000, 0.00000]], [ -0.21012, [ 3, -0.20000, 0.00000], [ 3, 0.20000, 0.00000]], [ -0.00149, [ 3, -0.20000, 0.00000], [ 3, 0.00000, 0.00000]]])

        names.append("RElbowRoll")
        times.append([ 1.00000, 1.60000, 2.00000, 2.60000, 3.40000, 4.20000, 4.40000, 5.00000, 5.60000])
        keys.append([ [ 1.00174, [ 3, -0.33333, 0.00000], [ 3, 0.20000, 0.00000]], [ 0.93885, [ 3, -0.20000, 0.01902], [ 3, 0.13333, -0.01268]], [ 0.90664, [ 3, -0.13333, 0.00000], [ 3, 0.20000, 0.00000]], [ 0.90970, [ 3, -0.20000, 0.00000], [ 3, 0.26667, 0.00000]], [ 0.82687, [ 3, -0.26667, 0.00153], [ 3, 0.26667, -0.00153]], [ 0.82533, [ 3, -0.26667, 0.00153], [ 3, 0.06667, -0.00038]], [ 0.10589, [ 3, -0.06667, 0.00665], [ 3, 0.20000, -0.01994]], [ 0.08595, [ 3, -0.20000, 0.00000], [ 3, 0.20000, 0.00000]], [ 0.99868, [ 3, -0.20000, 0.00000], [ 3, 0.00000, 0.00000]]])

        names.append("RElbowYaw")
        times.append([ 1.00000, 1.60000, 2.00000, 2.60000, 3.40000, 4.20000, 4.40000, 5.00000, 5.60000])
        keys.append([ [ 1.37135, [ 3, -0.33333, 0.00000], [ 3, 0.20000, 0.00000]], [ 1.37596, [ 3, -0.20000, -0.00460], [ 3, 0.13333, 0.00307]], [ 1.40664, [ 3, -0.13333, 0.00000], [ 3, 0.20000, 0.00000]], [ 1.37289, [ 3, -0.20000, 0.03375], [ 3, 0.26667, -0.04500]], [ 0.82525, [ 3, -0.26667, 0.23879], [ 3, 0.26667, -0.23879]], [ -0.05987, [ 3, -0.26667, 0.00000], [ 3, 0.06667, 0.00000]], [ 0.04291, [ 3, -0.06667, -0.00869], [ 3, 0.20000, 0.02608]], [ 0.06899, [ 3, -0.20000, -0.02608], [ 3, 0.20000, 0.02608]], [ 1.36675, [ 3, -0.20000, 0.00000], [ 3, 0.00000, 0.00000]]])

        names.append("RHand")
        times.append([ 1.00000, 1.60000, 2.00000, 2.60000, 3.40000, 4.20000, 4.40000, 5.00000, 5.60000])
        keys.append([ [ 0.00449, [ 3, -0.33333, 0.00000], [ 3, 0.20000, 0.00000]], [ 0.00449, [ 3, -0.20000, 0.00000], [ 3, 0.13333, 0.00000]], [ 0.00449, [ 3, -0.13333, 0.00000], [ 3, 0.20000, 0.00000]], [ 0.00449, [ 3, -0.20000, 0.00000], [ 3, 0.26667, 0.00000]], [ 0.00465, [ 3, -0.26667, 0.00000], [ 3, 0.26667, 0.00000]], [ 0.00451, [ 3, -0.26667, 0.00000], [ 3, 0.06667, 0.00000]], [ 0.00465, [ 3, -0.06667, 0.00000], [ 3, 0.20000, 0.00000]], [ 0.00449, [ 3, -0.20000, 0.00000], [ 3, 0.20000, 0.00000]], [ 0.00449, [ 3, -0.20000, 0.00000], [ 3, 0.00000, 0.00000]]])

        names.append("RHipPitch")
        times.append([ 1.00000, 1.60000, 2.00000, 2.60000, 3.40000, 4.20000, 4.40000, 5.00000, 5.60000])
        keys.append([ [ -0.44950, [ 3, -0.33333, 0.00000], [ 3, 0.20000, 0.00000]], [ -0.57989, [ 3, -0.20000, 0.00000], [ 3, 0.13333, 0.00000]], [ -0.56149, [ 3, -0.13333, -0.00573], [ 3, 0.20000, 0.00859]], [ -0.53694, [ 3, -0.20000, 0.00000], [ 3, 0.26667, 0.00000]], [ -0.53848, [ 3, -0.26667, 0.00077], [ 3, 0.26667, -0.00077]], [ -0.54154, [ 3, -0.26667, 0.00000], [ 3, 0.06667, 0.00000]], [ -0.54154, [ 3, -0.06667, 0.00000], [ 3, 0.20000, 0.00000]], [ -0.54154, [ 3, -0.20000, 0.00000], [ 3, 0.20000, 0.00000]], [ -0.44950, [ 3, -0.20000, 0.00000], [ 3, 0.00000, 0.00000]]])

        names.append("RHipRoll")
        times.append([ 1.00000, 1.60000, 2.00000, 2.60000, 3.40000, 4.20000, 4.40000, 5.00000, 5.60000])
        keys.append([ [ -0.00303, [ 3, -0.33333, 0.00000], [ 3, 0.20000, 0.00000]], [ -0.07666, [ 3, -0.20000, 0.00000], [ 3, 0.13333, 0.00000]], [ 0.07061, [ 3, -0.13333, 0.00000], [ 3, 0.20000, 0.00000]], [ 0.04760, [ 3, -0.20000, 0.00000], [ 3, 0.26667, 0.00000]], [ 0.05680, [ 3, -0.26667, 0.00000], [ 3, 0.26667, 0.00000]], [ 0.05373, [ 3, -0.26667, 0.00000], [ 3, 0.06667, 0.00000]], [ 0.05833, [ 3, -0.06667, 0.00000], [ 3, 0.20000, 0.00000]], [ 0.05373, [ 3, -0.20000, 0.00460], [ 3, 0.20000, -0.00460]], [ -0.00303, [ 3, -0.20000, 0.00000], [ 3, 0.00000, 0.00000]]])

        names.append("RHipYawPitch")
        times.append([ 1.00000, 1.60000, 2.00000, 2.60000, 3.40000, 4.20000, 4.40000, 5.00000, 5.60000])
        keys.append([ [ -0.00149, [ 3, -0.33333, 0.00000], [ 3, 0.20000, 0.00000]], [ -0.00149, [ 3, -0.20000, 0.00000], [ 3, 0.13333, 0.00000]], [ -0.13495, [ 3, -0.13333, 0.00000], [ 3, 0.20000, 0.00000]], [ -0.08126, [ 3, -0.20000, -0.01315], [ 3, 0.26667, 0.01753]], [ -0.04291, [ 3, -0.26667, 0.00000], [ 3, 0.26667, 0.00000]], [ -0.12575, [ 3, -0.26667, 0.00000], [ 3, 0.06667, 0.00000]], [ 0.00618, [ 3, -0.06667, 0.00000], [ 3, 0.20000, 0.00000]], [ -0.18557, [ 3, -0.20000, 0.00000], [ 3, 0.20000, 0.00000]], [ 0.00004, [ 3, -0.20000, 0.00000], [ 3, 0.00000, 0.00000]]])

        names.append("RKneePitch")
        times.append([ 1.00000, 1.60000, 2.00000, 2.60000, 3.40000, 4.20000, 4.40000, 5.00000, 5.60000])
        keys.append([ [ 0.69648, [ 3, -0.33333, 0.00000], [ 3, 0.20000, 0.00000]], [ 1.03703, [ 3, -0.20000, 0.00000], [ 3, 0.13333, 0.00000]], [ 0.87596, [ 3, -0.13333, 0.03498], [ 3, 0.20000, -0.05246]], [ 0.77471, [ 3, -0.20000, 0.00000], [ 3, 0.26667, 0.00000]], [ 0.77625, [ 3, -0.26667, -0.00128], [ 3, 0.26667, 0.00128]], [ 0.78238, [ 3, -0.26667, -0.00205], [ 3, 0.06667, 0.00051]], [ 0.78392, [ 3, -0.06667, 0.00000], [ 3, 0.20000, 0.00000]], [ 0.77931, [ 3, -0.20000, 0.00460], [ 3, 0.20000, -0.00460]], [ 0.69801, [ 3, -0.20000, 0.00000], [ 3, 0.00000, 0.00000]]])

        names.append("RShoulderPitch")
        times.append([ 1.00000, 1.60000, 2.00000, 2.60000, 3.40000, 4.20000, 4.40000, 5.00000, 5.60000])
        keys.append([ [ 1.43740, [ 3, -0.33333, 0.00000], [ 3, 0.20000, 0.00000]], [ 1.46194, [ 3, -0.20000, -0.00798], [ 3, 0.13333, 0.00532]], [ 1.47728, [ 3, -0.13333, 0.00000], [ 3, 0.20000, 0.00000]], [ 1.47268, [ 3, -0.20000, 0.00000], [ 3, 0.26667, 0.00000]], [ 1.65983, [ 3, -0.26667, -0.08283], [ 3, 0.26667, 0.08283]], [ 1.96969, [ 3, -0.26667, 0.00000], [ 3, 0.06667, 0.00000]], [ 0.77011, [ 3, -0.06667, 0.06596], [ 3, 0.20000, -0.19789]], [ 0.57222, [ 3, -0.20000, 0.00000], [ 3, 0.20000, 0.00000]], [ 1.44660, [ 3, -0.20000, 0.00000], [ 3, 0.00000, 0.00000]]])

        names.append("RShoulderRoll")
        times.append([ 1.00000, 1.60000, 2.00000, 2.60000, 3.40000, 4.20000, 4.40000, 5.00000, 5.60000])
        keys.append([ [ -0.28383, [ 3, -0.33333, 0.00000], [ 3, 0.20000, 0.00000]], [ -0.23014, [ 3, -0.20000, 0.00000], [ 3, 0.13333, 0.00000]], [ -0.25929, [ 3, -0.13333, 0.00000], [ 3, 0.20000, 0.00000]], [ -0.20713, [ 3, -0.20000, 0.00000], [ 3, 0.26667, 0.00000]], [ -0.83454, [ 3, -0.26667, 0.00000], [ 3, 0.26667, 0.00000]], [ -0.77318, [ 3, -0.26667, -0.06136], [ 3, 0.06667, 0.01534]], [ -0.29304, [ 3, -0.06667, 0.00000], [ 3, 0.20000, 0.00000]], [ -0.34519, [ 3, -0.20000, 0.00000], [ 3, 0.20000, 0.00000]], [ -0.28230, [ 3, -0.20000, 0.00000], [ 3, 0.00000, 0.00000]]])

        names.append("RWristYaw")
        times.append([ 1.00000, 1.60000, 2.00000, 2.60000, 3.40000, 4.20000, 4.40000, 5.00000, 5.60000])
        keys.append([ [ 0.01990, [ 3, -0.33333, 0.00000], [ 3, 0.20000, 0.00000]], [ 0.02450, [ 3, -0.20000, -0.00245], [ 3, 0.13333, 0.00164]], [ 0.03217, [ 3, -0.13333, 0.00000], [ 3, 0.20000, 0.00000]], [ 0.03217, [ 3, -0.20000, 0.00000], [ 3, 0.26667, 0.00000]], [ 0.04598, [ 3, -0.26667, -0.01381], [ 3, 0.26667, 0.01381]], [ 0.33590, [ 3, -0.26667, 0.00000], [ 3, 0.06667, 0.00000]], [ 0.30676, [ 3, -0.06667, 0.00000], [ 3, 0.20000, 0.00000]], [ 0.37425, [ 3, -0.20000, 0.00000], [ 3, 0.20000, 0.00000]], [ 0.01683, [ 3, -0.20000, 0.00000], [ 3, 0.00000, 0.00000]]])

        
        self.al_motion_proxy.angleInterpolationBezier(names, times, keys)
        return KickLeftResponse()  
    
    def KickRight(self,req):
        names = list()
        times = list()
        keys = list()

        names.append("HeadPitch")
        times.append([ 1.00000, 2.20000, 3.16000, 4.76000, 5.40000, 5.52000, 6.92000, 8.08000, 9.64000])
        keys.append([ [ -0.01078, [ 3, -0.33333, 0.00000], [ 3, 0.40000, 0.00000]], [ 0.51487, [ 3, -0.40000, 0.00000], [ 3, 0.32000, 0.00000]], [ 0.48470, [ 3, -0.32000, 0.00000], [ 3, 0.53333, 0.00000]], [ 0.51487, [ 3, -0.53333, 0.00000], [ 3, 0.21333, 0.00000]], [ 0.51487, [ 3, -0.21333, 0.00000], [ 3, 0.04000, 0.00000]], [ 0.51487, [ 3, -0.04000, 0.00000], [ 3, 0.46667, 0.00000]], [ 0.51487, [ 3, -0.46667, 0.00000], [ 3, 0.38667, 0.00000]], [ 0.51487, [ 3, -0.38667, 0.00000], [ 3, 0.52000, 0.00000]], [ -0.02305, [ 3, -0.52000, 0.00000], [ 3, 0.00000, 0.00000]]])

        names.append("HeadYaw")
        times.append([ 1.00000, 2.20000, 3.16000, 4.76000, 5.40000, 5.52000, 6.92000, 8.08000, 9.64000])
        keys.append([ [ 0.00609, [ 3, -0.33333, 0.00000], [ 3, 0.40000, 0.00000]], [ 0.00303, [ 3, -0.40000, 0.00307], [ 3, 0.32000, -0.00245]], [ -0.26389, [ 3, -0.32000, 0.00000], [ 3, 0.53333, 0.00000]], [ -0.11509, [ 3, -0.53333, -0.05807], [ 3, 0.21333, 0.02323]], [ -0.01998, [ 3, -0.21333, 0.00000], [ 3, 0.04000, 0.00000]], [ -0.01998, [ 3, -0.04000, 0.00000], [ 3, 0.46667, 0.00000]], [ -0.14117, [ 3, -0.46667, 0.00000], [ 3, 0.38667, 0.00000]], [ -0.00925, [ 3, -0.38667, -0.01141], [ 3, 0.52000, 0.01534]], [ 0.00609, [ 3, -0.52000, 0.00000], [ 3, 0.00000, 0.00000]]])

        names.append("LAnklePitch")
        times.append([ 1.00000, 2.20000, 3.16000, 4.76000, 5.40000, 5.52000, 6.92000, 8.08000, 9.64000])
        keys.append([ [ -0.36667, [ 3, -0.33333, 0.00000], [ 3, 0.40000, 0.00000]], [ -0.24241, [ 3, -0.40000, -0.08323], [ 3, 0.32000, 0.06659]], [ 0.08279, [ 3, -0.32000, -0.01289], [ 3, 0.53333, 0.02148]], [ 0.10427, [ 3, -0.53333, 0.00000], [ 3, 0.21333, 0.00000]], [ 0.09813, [ 3, -0.21333, 0.00215], [ 3, 0.04000, -0.00040]], [ 0.09660, [ 3, -0.04000, 0.00008], [ 3, 0.46667, -0.00094]], [ 0.09507, [ 3, -0.46667, 0.00084], [ 3, 0.38667, -0.00070]], [ 0.09200, [ 3, -0.38667, 0.00307], [ 3, 0.52000, -0.00413]], [ -0.36207, [ 3, -0.52000, 0.00000], [ 3, 0.00000, 0.00000]]])

        names.append("LAnkleRoll")
        times.append([ 1.00000, 2.20000, 3.16000, 4.76000, 5.40000, 5.52000, 6.92000, 8.08000, 9.64000])
        keys.append([ [ -0.00916, [ 3, -0.33333, 0.00000], [ 3, 0.40000, 0.00000]], [ -0.18711, [ 3, -0.40000, 0.00000], [ 3, 0.32000, 0.00000]], [ 0.21327, [ 3, -0.32000, -0.04418], [ 3, 0.53333, 0.07363]], [ 0.28690, [ 3, -0.53333, -0.02191], [ 3, 0.21333, 0.00877]], [ 0.30531, [ 3, -0.21333, 0.00000], [ 3, 0.04000, 0.00000]], [ 0.29457, [ 3, -0.04000, 0.00000], [ 3, 0.46667, 0.00000]], [ 0.29764, [ 3, -0.46667, 0.00000], [ 3, 0.38667, 0.00000]], [ -0.13342, [ 3, -0.38667, 0.00000], [ 3, 0.52000, 0.00000]], [ -0.00456, [ 3, -0.52000, 0.00000], [ 3, 0.00000, 0.00000]]])

        names.append("LElbowRoll")
        times.append([ 1.00000, 2.20000, 3.16000, 4.76000, 5.40000, 5.52000, 6.92000, 8.08000, 9.64000])
        keys.append([ [ -0.98785, [ 3, -0.33333, 0.00000], [ 3, 0.40000, 0.00000]], [ -0.68566, [ 3, -0.40000, -0.00192], [ 3, 0.32000, 0.00153]], [ -0.68412, [ 3, -0.32000, 0.00000], [ 3, 0.53333, 0.00000]], [ -0.76542, [ 3, -0.53333, 0.00000], [ 3, 0.21333, 0.00000]], [ -0.58748, [ 3, -0.21333, 0.00000], [ 3, 0.04000, 0.00000]], [ -0.66265, [ 3, -0.04000, 0.00092], [ 3, 0.46667, -0.01074]], [ -0.67338, [ 3, -0.46667, 0.00447], [ 3, 0.38667, -0.00371]], [ -0.68719, [ 3, -0.38667, 0.01381], [ 3, 0.52000, -0.01857]], [ -0.98325, [ 3, -0.52000, 0.00000], [ 3, 0.00000, 0.00000]]])

        names.append("LElbowYaw")
        times.append([ 1.00000, 2.20000, 3.16000, 4.76000, 5.40000, 5.52000, 6.92000, 8.08000, 9.64000])
        keys.append([ [ -1.36530, [ 3, -0.33333, 0.00000], [ 3, 0.40000, 0.00000]], [ -0.82840, [ 3, -0.40000, -0.02493], [ 3, 0.32000, 0.01994]], [ -0.80846, [ 3, -0.32000, 0.00000], [ 3, 0.53333, 0.00000]], [ -0.92811, [ 3, -0.53333, 0.00000], [ 3, 0.21333, 0.00000]], [ -0.79772, [ 3, -0.21333, 0.00000], [ 3, 0.04000, 0.00000]], [ -0.82073, [ 3, -0.04000, 0.00000], [ 3, 0.46667, 0.00000]], [ -0.82073, [ 3, -0.46667, 0.00000], [ 3, 0.38667, 0.00000]], [ -0.79465, [ 3, -0.38667, 0.00000], [ 3, 0.52000, 0.00000]], [ -1.40979, [ 3, -0.52000, 0.00000], [ 3, 0.00000, 0.00000]]])

        names.append("LHand")
        times.append([ 1.00000, 2.20000, 3.16000, 4.76000, 5.40000, 5.52000, 6.92000, 8.08000, 9.64000])
        keys.append([ [ 0.00453, [ 3, -0.33333, 0.00000], [ 3, 0.40000, 0.00000]], [ 0.00465, [ 3, -0.40000, 0.00000], [ 3, 0.32000, 0.00000]], [ 0.00465, [ 3, -0.32000, 0.00000], [ 3, 0.53333, 0.00000]], [ 0.00447, [ 3, -0.53333, 0.00000], [ 3, 0.21333, 0.00000]], [ 0.00447, [ 3, -0.21333, 0.00000], [ 3, 0.04000, 0.00000]], [ 0.00447, [ 3, -0.04000, 0.00000], [ 3, 0.46667, 0.00000]], [ 0.00447, [ 3, -0.46667, 0.00000], [ 3, 0.38667, 0.00000]], [ 0.00465, [ 3, -0.38667, 0.00000], [ 3, 0.52000, 0.00000]], [ 0.00454, [ 3, -0.52000, 0.00000], [ 3, 0.00000, 0.00000]]])

        names.append("LHipPitch")
        times.append([ 1.00000, 2.20000, 3.16000, 4.76000, 5.40000, 5.52000, 6.92000, 8.08000, 9.64000])
        keys.append([ [ -0.45556, [ 3, -0.33333, 0.00000], [ 3, 0.40000, 0.00000]], [ 0.00618, [ 3, -0.40000, -0.10710], [ 3, 0.32000, 0.08568]], [ 0.12276, [ 3, -0.32000, 0.00000], [ 3, 0.53333, 0.00000]], [ 0.11356, [ 3, -0.53333, 0.00000], [ 3, 0.21333, 0.00000]], [ 0.11509, [ 3, -0.21333, 0.00000], [ 3, 0.04000, 0.00000]], [ 0.10896, [ 3, -0.04000, 0.00000], [ 3, 0.46667, 0.00000]], [ 0.11663, [ 3, -0.46667, -0.00336], [ 3, 0.38667, 0.00278]], [ 0.12736, [ 3, -0.38667, 0.00000], [ 3, 0.52000, 0.00000]], [ -0.44942, [ 3, -0.52000, 0.00000], [ 3, 0.00000, 0.00000]]])

        names.append("LHipRoll")
        times.append([ 1.00000, 2.20000, 3.16000, 4.76000, 5.40000, 5.52000, 6.92000, 8.08000, 9.64000])
        keys.append([ [ 0.02152, [ 3, -0.33333, 0.00000], [ 3, 0.40000, 0.00000]], [ 0.20867, [ 3, -0.40000, 0.00000], [ 3, 0.32000, 0.00000]], [ -0.20245, [ 3, -0.32000, 0.01104], [ 3, 0.53333, -0.01841]], [ -0.22085, [ 3, -0.53333, 0.00877], [ 3, 0.21333, -0.00351]], [ -0.23926, [ 3, -0.21333, 0.00560], [ 3, 0.04000, -0.00105]], [ -0.24080, [ 3, -0.04000, 0.00000], [ 3, 0.46667, 0.00000]], [ -0.23926, [ 3, -0.46667, -0.00153], [ 3, 0.38667, 0.00127]], [ 0.11049, [ 3, -0.38667, 0.00000], [ 3, 0.52000, 0.00000]], [ 0.01692, [ 3, -0.52000, 0.00000], [ 3, 0.00000, 0.00000]]])

        names.append("LHipYawPitch")
        times.append([ 1.00000, 2.20000, 3.16000, 4.76000, 5.40000, 5.52000, 6.92000, 8.08000, 9.64000])
        keys.append([ [ -0.01530, [ 3, -0.33333, 0.00000], [ 3, 0.40000, 0.00000]], [ -0.09200, [ 3, -0.40000, 0.02869], [ 3, 0.32000, -0.02295]], [ -0.17023, [ 3, -0.32000, 0.00000], [ 3, 0.53333, 0.00000]], [ -0.17023, [ 3, -0.53333, 0.00000], [ 3, 0.21333, 0.00000]], [ -0.16256, [ 3, -0.21333, -0.00767], [ 3, 0.04000, 0.00144]], [ -0.11808, [ 3, -0.04000, 0.00000], [ 3, 0.46667, 0.00000]], [ -0.31750, [ 3, -0.46667, 0.00000], [ 3, 0.38667, 0.00000]], [ -0.16870, [ 3, -0.38667, -0.04449], [ 3, 0.52000, 0.05983]], [ -0.00456, [ 3, -0.52000, 0.00000], [ 3, 0.00000, 0.00000]]])

        names.append("LKneePitch")
        times.append([ 1.00000, 2.20000, 3.16000, 4.76000, 5.40000, 5.52000, 6.92000, 8.08000, 9.64000])
        keys.append([ [ 0.70406, [ 3, -0.33333, 0.00000], [ 3, 0.40000, 0.00000]], [ 0.31443, [ 3, -0.40000, 0.14715], [ 3, 0.32000, -0.11772]], [ -0.09055, [ 3, -0.32000, 0.00000], [ 3, 0.53333, 0.00000]], [ -0.08441, [ 3, -0.53333, 0.00000], [ 3, 0.21333, 0.00000]], [ -0.08901, [ 3, -0.21333, 0.00000], [ 3, 0.04000, 0.00000]], [ -0.08595, [ 3, -0.04000, 0.00000], [ 3, 0.46667, 0.00000]], [ -0.09055, [ 3, -0.46667, 0.00000], [ 3, 0.38667, 0.00000]], [ -0.09055, [ 3, -0.38667, 0.00000], [ 3, 0.52000, 0.00000]], [ 0.70560, [ 3, -0.52000, 0.00000], [ 3, 0.00000, 0.00000]]])

        names.append("LShoulderPitch")
        times.append([ 1.00000, 2.20000, 3.16000, 4.76000, 5.40000, 5.52000, 6.92000, 8.08000, 9.64000])
        keys.append([ [ 1.45572, [ 3, -0.33333, 0.00000], [ 3, 0.40000, 0.00000]], [ 1.77940, [ 3, -0.40000, -0.04793], [ 3, 0.32000, 0.03834]], [ 1.81774, [ 3, -0.32000, -0.03828], [ 3, 0.53333, 0.06381]], [ 2.08567, [ 3, -0.53333, 0.00000], [ 3, 0.21333, 0.00000]], [ 2.08567, [ 3, -0.21333, 0.00000], [ 3, 0.04000, 0.00000]], [ 1.44652, [ 3, -0.04000, 0.00000], [ 3, 0.46667, 0.00000]], [ 1.78093, [ 3, -0.46667, -0.07187], [ 3, 0.38667, 0.05955]], [ 1.84076, [ 3, -0.38667, 0.00000], [ 3, 0.52000, 0.00000]], [ 1.39283, [ 3, -0.52000, 0.00000], [ 3, 0.00000, 0.00000]]])

        names.append("LShoulderRoll")
        times.append([ 1.00000, 2.20000, 3.16000, 4.76000, 5.40000, 5.52000, 6.92000, 8.08000, 9.64000])
        keys.append([ [ 0.26841, [ 3, -0.33333, 0.00000], [ 3, 0.40000, 0.00000]], [ 0.47550, [ 3, -0.40000, 0.00000], [ 3, 0.32000, 0.00000]], [ 0.47396, [ 3, -0.32000, 0.00000], [ 3, 0.53333, 0.00000]], [ 0.60435, [ 3, -0.53333, 0.00000], [ 3, 0.21333, 0.00000]], [ 0.52305, [ 3, -0.21333, 0.06588], [ 3, 0.04000, -0.01235]], [ 0.36965, [ 3, -0.04000, 0.00000], [ 3, 0.46667, 0.00000]], [ 0.43408, [ 3, -0.46667, -0.02601], [ 3, 0.38667, 0.02155]], [ 0.51231, [ 3, -0.38667, 0.00000], [ 3, 0.52000, 0.00000]], [ 0.26381, [ 3, -0.52000, 0.00000], [ 3, 0.00000, 0.00000]]])

        names.append("LWristYaw")
        times.append([ 1.00000, 2.20000, 3.16000, 4.76000, 5.40000, 5.52000, 6.92000, 8.08000, 9.64000])
        keys.append([ [ 0.02297, [ 3, -0.33333, 0.00000], [ 3, 0.40000, 0.00000]], [ 0.46629, [ 3, -0.40000, -0.01726], [ 3, 0.32000, 0.01381]], [ 0.48010, [ 3, -0.32000, -0.01381], [ 3, 0.53333, 0.02301]], [ 0.58288, [ 3, -0.53333, -0.08729], [ 3, 0.21333, 0.03492]], [ 0.84673, [ 3, -0.21333, 0.00000], [ 3, 0.04000, 0.00000]], [ 0.53379, [ 3, -0.04000, 0.00197], [ 3, 0.46667, -0.02301]], [ 0.51078, [ 3, -0.46667, 0.00000], [ 3, 0.38667, 0.00000]], [ 0.51078, [ 3, -0.38667, 0.00000], [ 3, 0.52000, 0.00000]], [ -0.02765, [ 3, -0.52000, 0.00000], [ 3, 0.00000, 0.00000]]])

        names.append("RAnklePitch")
        times.append([ 1.00000, 2.20000, 3.16000, 4.76000, 5.40000, 5.52000, 6.92000, 8.08000, 9.64000])
        keys.append([ [ -0.37886, [ 3, -0.33333, 0.00000], [ 3, 0.40000, 0.00000]], [ -0.25920, [ 3, -0.40000, -0.08551], [ 3, 0.32000, 0.06840]], [ 0.08288, [ 3, -0.32000, 0.00000], [ 3, 0.53333, 0.00000]], [ -0.44022, [ 3, -0.53333, 0.22754], [ 3, 0.21333, -0.09102]], [ -0.87280, [ 3, -0.21333, 0.00000], [ 3, 0.04000, 0.00000]], [ 0.22861, [ 3, -0.04000, 0.00000], [ 3, 0.46667, 0.00000]], [ -0.05365, [ 3, -0.46667, 0.00000], [ 3, 0.38667, 0.00000]], [ 0.09362, [ 3, -0.38667, 0.00000], [ 3, 0.52000, 0.00000]], [ -0.36045, [ 3, -0.52000, 0.00000], [ 3, 0.00000, 0.00000]]])

        names.append("RAnkleRoll")
        times.append([ 1.00000, 2.20000, 3.16000, 4.76000, 5.40000, 5.52000, 6.92000, 8.08000, 9.64000])
        keys.append([ [ 0.00771, [ 3, -0.33333, 0.00000], [ 3, 0.40000, 0.00000]], [ 0.02459, [ 3, -0.40000, -0.01687], [ 3, 0.32000, 0.01350]], [ 0.13197, [ 3, -0.32000, 0.00000], [ 3, 0.53333, 0.00000]], [ 0.13197, [ 3, -0.53333, 0.00000], [ 3, 0.21333, 0.00000]], [ 0.16725, [ 3, -0.21333, 0.00000], [ 3, 0.04000, 0.00000]], [ 0.13043, [ 3, -0.04000, 0.00000], [ 3, 0.46667, 0.00000]], [ 0.16725, [ 3, -0.46667, 0.00000], [ 3, 0.38667, 0.00000]], [ 0.13197, [ 3, -0.38667, 0.02333], [ 3, 0.52000, -0.03138]], [ 0.00311, [ 3, -0.52000, 0.00000], [ 3, 0.00000, 0.00000]]])

        names.append("RElbowRoll")
        times.append([ 1.00000, 2.20000, 3.16000, 4.76000, 5.40000, 5.52000, 6.92000, 8.08000, 9.64000])
        keys.append([ [ 0.98947, [ 3, -0.33333, 0.00000], [ 3, 0.40000, 0.00000]], [ 0.93885, [ 3, -0.40000, 0.00000], [ 3, 0.32000, 0.00000]], [ 0.94192, [ 3, -0.32000, -0.00307], [ 3, 0.53333, 0.00511]], [ 0.97106, [ 3, -0.53333, -0.02915], [ 3, 0.21333, 0.01166]], [ 1.10299, [ 3, -0.21333, 0.00000], [ 3, 0.04000, 0.00000]], [ 0.66120, [ 3, -0.04000, 0.00000], [ 3, 0.46667, 0.00000]], [ 0.94652, [ 3, -0.46667, 0.00000], [ 3, 0.38667, 0.00000]], [ 0.92504, [ 3, -0.38667, 0.00000], [ 3, 0.52000, 0.00000]], [ 0.98180, [ 3, -0.52000, 0.00000], [ 3, 0.00000, 0.00000]]])

        names.append("RElbowYaw")
        times.append([ 1.00000, 2.20000, 3.16000, 4.76000, 5.40000, 5.52000, 6.92000, 8.08000, 9.64000])
        keys.append([ [ 1.36675, [ 3, -0.33333, 0.00000], [ 3, 0.40000, 0.00000]], [ 1.24250, [ 3, -0.40000, 0.02869], [ 3, 0.32000, -0.02295]], [ 1.21182, [ 3, -0.32000, 0.00000], [ 3, 0.53333, 0.00000]], [ 1.27778, [ 3, -0.53333, 0.00000], [ 3, 0.21333, 0.00000]], [ 1.05535, [ 3, -0.21333, 0.00000], [ 3, 0.04000, 0.00000]], [ 1.17040, [ 3, -0.04000, -0.00131], [ 3, 0.46667, 0.01534]], [ 1.18574, [ 3, -0.46667, -0.00783], [ 3, 0.38667, 0.00649]], [ 1.21335, [ 3, -0.38667, -0.02761], [ 3, 0.52000, 0.03713]], [ 1.40203, [ 3, -0.52000, 0.00000], [ 3, 0.00000, 0.00000]]])

        names.append("RHand")
        times.append([ 1.00000, 2.20000, 3.16000, 4.76000, 5.40000, 5.52000, 6.92000, 8.08000, 9.64000])
        keys.append([ [ 0.00454, [ 3, -0.33333, 0.00000], [ 3, 0.40000, 0.00000]], [ 0.00468, [ 3, -0.40000, -0.00001], [ 3, 0.32000, 0.00001]], [ 0.00468, [ 3, -0.32000, 0.00000], [ 3, 0.53333, 0.00000]], [ 0.00452, [ 3, -0.53333, 0.00000], [ 3, 0.21333, 0.00000]], [ 0.00452, [ 3, -0.21333, 0.00000], [ 3, 0.04000, 0.00000]], [ 0.00452, [ 3, -0.04000, 0.00000], [ 3, 0.46667, 0.00000]], [ 0.00452, [ 3, -0.46667, 0.00000], [ 3, 0.38667, 0.00000]], [ 0.00468, [ 3, -0.38667, 0.00000], [ 3, 0.52000, 0.00000]], [ 0.00456, [ 3, -0.52000, 0.00000], [ 3, 0.00000, 0.00000]]])

        names.append("RHipPitch")
        times.append([ 1.00000, 2.20000, 3.16000, 4.76000, 5.40000, 5.52000, 6.92000, 8.08000, 9.64000])
        keys.append([ [ -0.46024, [ 3, -0.33333, 0.00000], [ 3, 0.40000, 0.00000]], [ 0.00609, [ 3, -0.40000, -0.11022], [ 3, 0.32000, 0.08818]], [ 0.13495, [ 3, -0.32000, 0.00000], [ 3, 0.53333, 0.00000]], [ -0.34366, [ 3, -0.53333, 0.00000], [ 3, 0.21333, 0.00000]], [ -0.02152, [ 3, -0.21333, 0.00000], [ 3, 0.04000, 0.00000]], [ -0.58756, [ 3, -0.04000, 0.00000], [ 3, 0.46667, 0.00000]], [ -0.23167, [ 3, -0.46667, -0.13115], [ 3, 0.38667, 0.10867]], [ 0.13188, [ 3, -0.38667, 0.00000], [ 3, 0.52000, 0.00000]], [ -0.45717, [ 3, -0.52000, 0.00000], [ 3, 0.00000, 0.00000]]])

        names.append("RHipRoll")
        times.append([ 1.00000, 2.20000, 3.16000, 4.76000, 5.40000, 5.52000, 6.92000, 8.08000, 9.64000])
        keys.append([ [ -0.03064, [ 3, -0.33333, 0.00000], [ 3, 0.40000, 0.00000]], [ 0.00618, [ 3, -0.40000, 0.00000], [ 3, 0.32000, 0.00000]], [ -0.12421, [ 3, -0.32000, 0.00000], [ 3, 0.53333, 0.00000]], [ -0.11961, [ 3, -0.53333, 0.00000], [ 3, 0.21333, 0.00000]], [ -0.29755, [ 3, -0.21333, 0.00000], [ 3, 0.04000, 0.00000]], [ -0.18097, [ 3, -0.04000, -0.00039], [ 3, 0.46667, 0.00460]], [ -0.17637, [ 3, -0.46667, -0.00460], [ 3, 0.38667, 0.00381]], [ -0.10887, [ 3, -0.38667, -0.02246], [ 3, 0.52000, 0.03021]], [ -0.01837, [ 3, -0.52000, 0.00000], [ 3, 0.00000, 0.00000]]])

        names.append("RHipYawPitch")
        times.append([ 1.00000, 2.20000, 3.16000, 4.76000, 5.40000, 5.52000, 6.92000, 8.08000, 9.64000])
        keys.append([ [ -0.01530, [ 3, -0.33333, 0.00000], [ 3, 0.40000, 0.00000]], [ -0.09200, [ 3, -0.40000, 0.02869], [ 3, 0.32000, -0.02295]], [ -0.17023, [ 3, -0.32000, 0.00000], [ 3, 0.53333, 0.00000]], [ -0.17023, [ 3, -0.53333, 0.00000], [ 3, 0.21333, 0.00000]], [ -0.16256, [ 3, -0.21333, -0.00767], [ 3, 0.04000, 0.00144]], [ -0.11808, [ 3, -0.04000, 0.00000], [ 3, 0.46667, 0.00000]], [ -0.31750, [ 3, -0.46667, 0.00000], [ 3, 0.38667, 0.00000]], [ -0.16870, [ 3, -0.38667, -0.04449], [ 3, 0.52000, 0.05983]], [ -0.00456, [ 3, -0.52000, 0.00000], [ 3, 0.00000, 0.00000]]])

        names.append("RKneePitch")
        times.append([ 1.00000, 2.20000, 3.16000, 4.76000, 5.40000, 5.52000, 6.92000, 8.08000, 9.64000])
        keys.append([ [ 0.70261, [ 3, -0.33333, 0.00000], [ 3, 0.40000, 0.00000]], [ 0.31298, [ 3, -0.40000, 0.14601], [ 3, 0.32000, -0.11681]], [ -0.08586, [ 3, -0.32000, 0.00000], [ 3, 0.53333, 0.00000]], [ 0.89897, [ 3, -0.53333, -0.24927], [ 3, 0.21333, 0.09971]], [ 0.99868, [ 3, -0.21333, 0.00000], [ 3, 0.04000, 0.00000]], [ 0.44797, [ 3, -0.04000, 0.00526], [ 3, 0.46667, -0.06136]], [ 0.38661, [ 3, -0.46667, 0.06136], [ 3, 0.38667, -0.05084]], [ -0.09046, [ 3, -0.38667, 0.00000], [ 3, 0.52000, 0.00000]], [ 0.70568, [ 3, -0.52000, 0.00000], [ 3, 0.00000, 0.00000]]])

        names.append("RShoulderPitch")
        times.append([ 1.00000, 2.20000, 3.16000, 4.76000, 5.40000, 5.52000, 6.92000, 8.08000, 9.64000])
        keys.append([ [ 1.44507, [ 3, -0.33333, 0.00000], [ 3, 0.40000, 0.00000]], [ 1.93135, [ 3, -0.40000, -0.07863], [ 3, 0.32000, 0.06290]], [ 1.99425, [ 3, -0.32000, 0.00000], [ 3, 0.53333, 0.00000]], [ 1.42973, [ 3, -0.53333, 0.16618], [ 3, 0.21333, -0.06647]], [ 1.29627, [ 3, -0.21333, 0.00000], [ 3, 0.04000, 0.00000]], [ 2.08567, [ 3, -0.04000, 0.00000], [ 3, 0.46667, 0.00000]], [ 2.04947, [ 3, -0.46667, 0.01163], [ 3, 0.38667, -0.00964]], [ 2.02186, [ 3, -0.38667, 0.02761], [ 3, 0.52000, -0.03713]], [ 1.41286, [ 3, -0.52000, 0.00000], [ 3, 0.00000, 0.00000]]])

        names.append("RShoulderRoll")
        times.append([ 1.00000, 2.20000, 3.16000, 4.76000, 5.40000, 5.52000, 6.92000, 8.08000, 9.64000])
        keys.append([ [ -0.26696, [ 3, -0.33333, 0.00000], [ 3, 0.40000, 0.00000]], [ -0.37280, [ 3, -0.40000, 0.10585], [ 3, 0.32000, -0.08468]], [ -1.06771, [ 3, -0.32000, 0.00000], [ 3, 0.53333, 0.00000]], [ -0.59523, [ 3, -0.53333, 0.00000], [ 3, 0.21333, 0.00000]], [ -0.60904, [ 3, -0.21333, 0.00000], [ 3, 0.04000, 0.00000]], [ -0.54154, [ 3, -0.04000, 0.00000], [ 3, 0.46667, 0.00000]], [ -0.57222, [ 3, -0.46667, 0.00000], [ 3, 0.38667, 0.00000]], [ -0.40962, [ 3, -0.38667, -0.04318], [ 3, 0.52000, 0.05807]], [ -0.26849, [ 3, -0.52000, 0.00000], [ 3, 0.00000, 0.00000]]])

        names.append("RWristYaw")
        times.append([ 1.00000, 2.20000, 3.16000, 4.76000, 5.40000, 5.52000, 6.92000, 8.08000, 9.64000])
        keys.append([ [ 0.02604, [ 3, -0.33333, 0.00000], [ 3, 0.40000, 0.00000]], [ 0.00456, [ 3, -0.40000, 0.00000], [ 3, 0.32000, 0.00000]], [ 0.00456, [ 3, -0.32000, 0.00000], [ 3, 0.53333, 0.00000]], [ 0.02143, [ 3, -0.53333, 0.00000], [ 3, 0.21333, 0.00000]], [ 0.02143, [ 3, -0.21333, 0.00000], [ 3, 0.04000, 0.00000]], [ 0.02450, [ 3, -0.04000, 0.00000], [ 3, 0.46667, 0.00000]], [ 0.02297, [ 3, -0.46667, 0.00153], [ 3, 0.38667, -0.00127]], [ -0.00004, [ 3, -0.38667, 0.00698], [ 3, 0.52000, -0.00938]], [ -0.02612, [ 3, -0.52000, 0.00000], [ 3, 0.00000, 0.00000]]])
        
        self.al_motion_proxy.angleInterpolationBezier(names, times, keys)
        return KickRightResponse()
        
    def GetJointAngle(self,req):
        angle=self.al_motion_proxy.getAngles(req.joint,True)
        return GetJointAngleResponse(angle)
        
    def ChangeJointAngle(self,req):
        self.al_motion_proxy.changeAngles(req.joint,req.angle,req.speed)
        return ChangeJointAngleResponse()  
        
    def MoveToTopic(self,req):
        self.pub_is_moving.publish(True)
        self.al_motion_proxy.moveTo(req.x,req.y,req.theta)
        self.pub_is_moving.publish(False)  
        
    def MoveAroundPointTopic(self,req):
        self.x=req.radius*(1-math.cos(req.theta))
        self.y=req.radius*math.sin(req.theta)
        self.theta=-req.theta
        self.pub_is_moving.publish(True)
        self.al_motion_proxy.moveTo(self.x,self.y,self.theta)
        self.pub_is_moving.publish(False)  
    
    def MoveToNavigate(self,req):
        self.pub_is_moving.publish(True)
        reach_target=self.al_navigation_proxy.moveTo(req.x,req.y,req.theta)
        if(reach_target==False):
            self.al_robot_posture_proxy.goToPosture("StandInit",0.5)   
        self.pub_is_moving.publish(False)  
        self.pub_navigate_reached.publish(reach_target) 
        
    def SetSecurityDistance(self,req):
        self.al_navigation_proxy.setSecurityDistance(req.distance)
    
    def SetWalkTargetVelocity(self,req):
        self.al_motion_proxy.setWalkTargetVelocity(req.x,req.y,req.theta,req.freq)
        return SetWalkTargetVelocityResponse()
                                 
##############################################################################
#                          RUNNING THE MAIN ROUTINE
############################################################################## 

if __name__ == '__main__':
    try:
        main()
    except rospy.ROSInterruptException:
        pass

